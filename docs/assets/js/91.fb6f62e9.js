(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{603:function(t,e,v){"use strict";v.r(e);var a=v(13),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"entities"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#entities"}},[t._v("#")]),t._v(" Entities")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#rocketpoolprotocol"}},[v("code",[t._v("RocketPoolProtocol")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#staker"}},[v("code",[t._v("Staker")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#rocketethtransaction"}},[v("code",[t._v("RocketETHTransaction")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#networkstakerbalancecheckpoint"}},[v("code",[t._v("NetworkStakerBalanceCheckpoint")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#stakerbalancecheckpoint"}},[v("code",[t._v("StakerBalanceCheckpoint")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#node"}},[v("code",[t._v("Node")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#noderplstaketransaction"}},[v("code",[t._v("NodeRPLStakeTransaction")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#rplrewardinterval"}},[v("code",[t._v("RPLRewardInterval")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#rplrewardclaim"}},[v("code",[t._v("RPLRewardClaim")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#networknodetimezone"}},[v("code",[t._v("NetworkNodeTimezone")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#networknodebalancecheckpoint"}},[v("code",[t._v("NetworkNodeBalanceCheckpoint")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#nodebalancecheckpoint"}},[v("code",[t._v("NodeBalanceCheckpoint")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#minipool"}},[v("code",[t._v("Minipool")])])])]),t._v(" "),v("h2",{attrs:{id:"rocketpoolprotocol"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rocketpoolprotocol"}},[t._v("#")]),t._v(" RocketPoolProtocol")]),t._v(" "),v("p",[t._v("Description: Entity that represents the RocketPool protocol.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("The name of the RocketPool protocol.")])]),t._v(" "),v("tr",[v("td",[t._v("stakersWithETHRewards")]),t._v(" "),v("td",[t._v("[Staker!]!")]),t._v(" "),v("td",[t._v("All stakers that have had ETH rewards while staking with RocketPool.")])]),t._v(" "),v("tr",[v("td",[t._v("activeStakers")]),t._v(" "),v("td",[t._v("[Staker!]!")]),t._v(" "),v("td",[t._v("All stakers that currently have an rETH balance greater than 0.")])]),t._v(" "),v("tr",[v("td",[t._v("stakers")]),t._v(" "),v("td",[t._v("[Staker!]!")]),t._v(" "),v("td",[t._v("All stakers that have ever held rETH.")])]),t._v(" "),v("tr",[v("td",[t._v("lastNetworkStakerBalanceCheckPoint")]),t._v(" "),v("td",[t._v("NetworkStakerBalanceCheckpoint")]),t._v(" "),v("td",[t._v("Last known staker network balance checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("nodes")]),t._v(" "),v("td",[t._v("[Node!]!")]),t._v(" "),v("td",[t._v("All nodes that are registered with the RocketPool protocol.")])]),t._v(" "),v("tr",[v("td",[t._v("nodeTimezones")]),t._v(" "),v("td",[t._v("[NetworkNodeTimezone!]!")]),t._v(" "),v("td",[t._v("All timezones associated with registered nodes.")])]),t._v(" "),v("tr",[v("td",[t._v("lastRPLRewardInterval")]),t._v(" "),v("td",[t._v("RPLRewardInterval")]),t._v(" "),v("td",[t._v("Last known RPL reward interval.")])]),t._v(" "),v("tr",[v("td",[t._v("lastNetworkNodeBalanceCheckPoint")]),t._v(" "),v("td",[t._v("NetworkNodeBalanceCheckpoint")]),t._v(" "),v("td",[t._v("Last known node network balance checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("networkNodeBalanceCheckpoints")]),t._v(" "),v("td",[t._v("[NetworkNodeBalanceCheckpoint!]!")]),t._v(" "),v("td",[t._v("All node network balance checkpoints for the RocketPool protocol.")])])])]),t._v(" "),v("h2",{attrs:{id:"staker"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#staker"}},[t._v("#")]),t._v(" Staker")]),t._v(" "),v("p",[t._v("Description: An address that is/was associated with an rETH balance.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Address that holds rETH.")])]),t._v(" "),v("tr",[v("td",[t._v("rETHBalance")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current rETH balance in WEI.")])]),t._v(" "),v("tr",[v("td",[t._v("ethBalance")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current ETH balance in WEI.")])]),t._v(" "),v("tr",[v("td",[t._v("totalETHRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total ETH rewards (in WEI) accrued during the lifecycle of the staker.")])]),t._v(" "),v("tr",[v("td",[t._v("hasAccruedETHRewardsDuringLifecycle")]),t._v(" "),v("td",[t._v("Boolean!")]),t._v(" "),v("td",[t._v("Indicates if this staker has accrued ETH rewards at some point in time during its lifetime.")])]),t._v(" "),v("tr",[v("td",[t._v("lastBalanceCheckpoint")]),t._v(" "),v("td",[t._v("StakerBalanceCheckpoint")]),t._v(" "),v("td",[t._v("The last known staker balance checkpoint for this staker.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block number at which this staker first received rETH.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this staker first received rETH.")])])])]),t._v(" "),v("h2",{attrs:{id:"rocketethtransaction"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rocketethtransaction"}},[t._v("#")]),t._v(" RocketETHTransaction")]),t._v(" "),v("p",[t._v("Description: Tracks the mint, burn and transfers of rETH.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key based on transaction hash of the triggered event and its log index.")])]),t._v(" "),v("tr",[v("td",[t._v("from")]),t._v(" "),v("td",[t._v("Staker!")]),t._v(" "),v("td",[t._v("The address that was the original owner of the rETH.")])]),t._v(" "),v("tr",[v("td",[t._v("amount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The rETH amount (in WEI) being transferred.")])]),t._v(" "),v("tr",[v("td",[t._v("to")]),t._v(" "),v("td",[t._v("Staker!")]),t._v(" "),v("td",[t._v("The address that was the recipient of the rETH.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The block number of this transaction.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The block timestamp of this transaction.")])]),t._v(" "),v("tr",[v("td",[t._v("transactionHash")]),t._v(" "),v("td",[t._v("Bytes!")]),t._v(" "),v("td",[t._v("The transaction hash.")])])])]),t._v(" "),v("h2",{attrs:{id:"networkstakerbalancecheckpoint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#networkstakerbalancecheckpoint"}},[t._v("#")]),t._v(" NetworkStakerBalanceCheckpoint")]),t._v(" "),v("p",[t._v("Description: Summarizes staker related balances at a specific block and timestamp.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key based on transaction hash of the triggered event and its log index.")])]),t._v(" "),v("tr",[v("td",[t._v("previousCheckpointId")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("Id to the the previous checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("nextCheckpointId")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("Id to the the next checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakerETHActivelyStaking")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Staker ETH (in WEI) balance (initial deposit + (ETH network rewards - average node fee)) on the beacon chain at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakerETHWaitingInDepositPool")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Staker ETH (in WEI) waiting in the deposit pool at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakerETHInRocketETHContract")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Staker ETH (in WEI) in the RocketETH contract at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakerETHInProtocol")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Staker ETH (in WEI) in RocketPool at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalStakerETHRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Staker ETH rewards (+/-) (in WEI) for all staker balance checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalStakersWithETHRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Stakers that have had ETH rewards (+/-) up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageStakerETHRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average staker ETH rewards (+/-) (in WEI) up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakersWithAnRETHBalance")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total unique stakers that have an rETH balance (in WEI) greater than 0 at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalRETHSupply")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total rETH supply at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("rETHExchangeRate")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Exchange rate of ETH:rETH (in WEI) at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block Number of this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block Timestamp of this checkpoint.")])])])]),t._v(" "),v("h2",{attrs:{id:"stakerbalancecheckpoint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stakerbalancecheckpoint"}},[t._v("#")]),t._v(" StakerBalanceCheckpoint")]),t._v(" "),v("p",[t._v("Description: Summarizes balances for a staker at a specific block and timestamp.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key consisting of the NetworkBalanceCheckpoint ID and the Staker ID.")])]),t._v(" "),v("tr",[v("td",[t._v("stakerId")]),t._v(" "),v("td",[t._v("String!")]),t._v(" "),v("td",[t._v("Staker that is associated with this balance checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("networkStakerBalanceCheckpointId")]),t._v(" "),v("td",[t._v("String!")]),t._v(" "),v("td",[t._v("The network staker balance checkpoint that triggered the creation of this reward.")])]),t._v(" "),v("tr",[v("td",[t._v("ethBalance")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("ETH balance (in WEI) of the staker of this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("rETHBalance")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("rETH balance (in WEI) of the staker of this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalETHRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total ETH rewards (in WEI) up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block Number of this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block Timestamp of this checkpoint.")])])])]),t._v(" "),v("h2",{attrs:{id:"node"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[t._v("#")]),t._v(" Node")]),t._v(" "),v("p",[t._v("Description: A node address that was registered by a node operator.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Address that is associated with a node on RocketPool.")])]),t._v(" "),v("tr",[v("td",[t._v("timezone")]),t._v(" "),v("td",[t._v("NetworkNodeTimezone!")]),t._v(" "),v("td",[t._v("Current timezone for this node.")])]),t._v(" "),v("tr",[v("td",[t._v("isOracleNode")]),t._v(" "),v("td",[t._v("Boolean!")]),t._v(" "),v("td",[t._v("Indicator that determines if a node is currently an oracle node or not.")])]),t._v(" "),v("tr",[v("td",[t._v("oracleNodeRPLBond")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("If this node is currently an oracle node, signifies the RPL bond of the ODAO node.")])]),t._v(" "),v("tr",[v("td",[t._v("oracleNodeBlockTime")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("Identifies the block time of the last ODAO state change for this node.")])]),t._v(" "),v("tr",[v("td",[t._v("rplStaked")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current RPL staked.")])]),t._v(" "),v("tr",[v("td",[t._v("effectiveRPLStaked")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current effective RPL staked.")])]),t._v(" "),v("tr",[v("td",[t._v("totalRPLSlashed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total RPL slashed since this node was registered with RocketPool.")])]),t._v(" "),v("tr",[v("td",[t._v("totalODAORewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total claim amount accrued via the ODAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("totalNodeRewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total claim amount accrued via the regular reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("averageODAORewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average reward claim this node has done via the ODAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("averageNodeRewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average reward claim this node has done via the regular reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("odaoRewardClaimCount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total amount of successfull RPL claims a node has done via the ODAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("nodeRewardClaimCount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total amount of successfull RPL claims a node has done via the regular node reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("minimumEffectiveRPL")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current minimum RPL needed to collateralize all staking minipools of this node by the bare minimum.")])]),t._v(" "),v("tr",[v("td",[t._v("maximumEffectiveRPL")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current maximum RPL needed to collateralize all staking minipools of this node to the absolute maximum.")])]),t._v(" "),v("tr",[v("td",[t._v("queuedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current queueud minipools")])]),t._v(" "),v("tr",[v("td",[t._v("stakingMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current staking minipools")])]),t._v(" "),v("tr",[v("td",[t._v("stakingUnbondedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current unbonded staking minipools")])]),t._v(" "),v("tr",[v("td",[t._v("withdrawableMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current withdrawable minipools.")])]),t._v(" "),v("tr",[v("td",[t._v("totalFinalizedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Finalized minipools since this node was registered with RocketPool.")])]),t._v(" "),v("tr",[v("td",[t._v("averageFeeForActiveMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average minipool fee for the active (NOT finalized or destroyed) minipools for this node operator.")])]),t._v(" "),v("tr",[v("td",[t._v("lastNodeBalanceCheckpoint")]),t._v(" "),v("td",[t._v("NodeBalanceCheckpoint")]),t._v(" "),v("td",[t._v("Last node balance checkpoint for this node.")])]),t._v(" "),v("tr",[v("td",[t._v("minipools")]),t._v(" "),v("td",[t._v("[Minipool!]!")]),t._v(" "),v("td",[t._v("Associated minipools for this node.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("Block number at which this node was first registered with the protocol.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("Block timestamp at which this node was first registered with the protocol.")])])])]),t._v(" "),v("h2",{attrs:{id:"noderplstaketransaction"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#noderplstaketransaction"}},[t._v("#")]),t._v(" NodeRPLStakeTransaction")]),t._v(" "),v("p",[t._v("Description: Keeps track of the RPL staking transactions for a node.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key based on transaction hash of the triggered event and its log index.")])]),t._v(" "),v("tr",[v("td",[t._v("node")]),t._v(" "),v("td",[t._v("Node!")]),t._v(" "),v("td",[t._v("Total number of nodes registered with this timezone.")])]),t._v(" "),v("tr",[v("td",[t._v("amount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL amount that concerns this transaction.")])]),t._v(" "),v("tr",[v("td",[t._v("ethAmount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total ETH equivalent at the time of this transaction.")])]),t._v(" "),v("tr",[v("td",[t._v("type")]),t._v(" "),v("td",[t._v("NodeRPLStakeTransactionType!")]),t._v(" "),v("td",[t._v("The type of RPL stake transaction.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("On what block number did this transaction occur.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("At what time did this transaction occur.")])])])]),t._v(" "),v("h2",{attrs:{id:"rplrewardinterval"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rplrewardinterval"}},[t._v("#")]),t._v(" RPLRewardInterval")]),t._v(" "),v("p",[t._v("Description: Represents an reward interval during which RPL can be claimed by different types of claimers.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key based on transaction hash of the triggered event and its log index.")])]),t._v(" "),v("tr",[v("td",[t._v("previousIntervalId")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("ID to the previous.")])]),t._v(" "),v("tr",[v("td",[t._v("nextIntervalId")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("ID to the next interval.")])]),t._v(" "),v("tr",[v("td",[t._v("claimableRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that are claimable for this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("claimableRewardsFromPreviousInterval")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards from the previous interval that rolled over into this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("claimablePDAORewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that are claimable for this interval via the PDAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("claimableODAORewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that are claimable for this interval via the ODAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("claimableNodeRewards")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that are claimable for this interval via the regula node reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("totalRPLClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards claimed during this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("totalPDAORewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that have been claimed during this interval for the PDAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("totalODAORewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that have been claimed during this interval for the ODAO reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("totalNodeRewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL rewards that have been claimed during this interval for the regular node reward claim contract.")])]),t._v(" "),v("tr",[v("td",[t._v("averageODAORewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average RPL claim for the ODAO reward claim contract during this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("averageNodeRewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average RPL claim for the regular node reward claim contract during this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("odaoRewardClaimCount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total number of claims done for the ODAO reward claim contract during this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("nodeRewardClaimCount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total number of claims done for the regular node reward claim contract during this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("rplRewardClaims")]),t._v(" "),v("td",[t._v("[RPLRewardClaim!]!")]),t._v(" "),v("td",[t._v("The total RPL rewards that were given out in this interval.")])]),t._v(" "),v("tr",[v("td",[t._v("isClosed")]),t._v(" "),v("td",[t._v("Boolean!")]),t._v(" "),v("td",[t._v("Indicates if this interval is still active.")])]),t._v(" "),v("tr",[v("td",[t._v("intervalStartTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Indicates when this interval started.")])]),t._v(" "),v("tr",[v("td",[t._v("intervalClosedTime")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("Indicates when this interval ended.")])]),t._v(" "),v("tr",[v("td",[t._v("intervalDuration")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Indicates how long the interval was supposed to last.")])]),t._v(" "),v("tr",[v("td",[t._v("intervalDurationActual")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("Indicates how long the interval actually lasted.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("On what block number was this interval created.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("At what time was this interval created.")])])])]),t._v(" "),v("h2",{attrs:{id:"rplrewardclaim"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rplrewardclaim"}},[t._v("#")]),t._v(" RPLRewardClaim")]),t._v(" "),v("p",[t._v("Description: Represents an RPL reward that has been claimed by an address.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key based on transaction hash of the triggered event and its log index.")])]),t._v(" "),v("tr",[v("td",[t._v("rplRewardIntervalId")]),t._v(" "),v("td",[t._v("String!")]),t._v(" "),v("td",[t._v("Id of the associated RPL reward interval parent.")])]),t._v(" "),v("tr",[v("td",[t._v("claimer")]),t._v(" "),v("td",[t._v("String!")]),t._v(" "),v("td",[t._v("The claiming address.")])]),t._v(" "),v("tr",[v("td",[t._v("claimerType")]),t._v(" "),v("td",[t._v("RPLRewardClaimerType!")]),t._v(" "),v("td",[t._v("The type of the claimer.")])]),t._v(" "),v("tr",[v("td",[t._v("amount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total RPL amount of this claim.")])]),t._v(" "),v("tr",[v("td",[t._v("ethAmount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The total ETH equivalent (in WEI) at the time of this reward.")])]),t._v(" "),v("tr",[v("td",[t._v("transactionHash")]),t._v(" "),v("td",[t._v("String!")]),t._v(" "),v("td",[t._v("The transaction hash associated with this claim.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The block number associated with this claim.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The block timestamp associated with this claim.")])])])]),t._v(" "),v("h2",{attrs:{id:"networknodetimezone"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#networknodetimezone"}},[t._v("#")]),t._v(" NetworkNodeTimezone")]),t._v(" "),v("p",[t._v("Description: Represents the network timezones and the registered node(s).")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Timezone name.")])]),t._v(" "),v("tr",[v("td",[t._v("totalRegisteredNodes")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total nodes registered with this timezone.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block Number on which this timezone was created.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block Timestamp on which this timezone was created.")])])])]),t._v(" "),v("h2",{attrs:{id:"networknodebalancecheckpoint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#networknodebalancecheckpoint"}},[t._v("#")]),t._v(" NetworkNodeBalanceCheckpoint")]),t._v(" "),v("p",[t._v("Description: Represents a network balance checkpoint for all nodes.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key based on transaction hash of the triggered event and its log index.")])]),t._v(" "),v("tr",[v("td",[t._v("previousCheckpointId")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("Id to the the previous checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("nextCheckpointId")]),t._v(" "),v("td",[t._v("String")]),t._v(" "),v("td",[t._v("Id to the the next checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("nodesRegistered")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total number of registered RocketPool nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("oracleNodesRegistered")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total number of oracle nodes registrered with RocketPool at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("rplStaked")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("RPL staked accross all nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("effectiveRPLStaked")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Effective RPL staked accross all nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("minimumEffectiveRPL")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Minimum RPL needed to collateralize the staking minipools by the absolute minimum at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("maximumEffectiveRPL")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("maximum RPL needed to collateralize the staking minipools to the absolute maximum at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("minimumEffectiveRPLNewMinipool")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Minimum RPL needed to start a new minipool at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("maximumEffectiveRPLNewMinipool")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Maximum RPL needed to start a new minipool at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalRPLSlashed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total RPL slashed from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalODAORewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total accrued rewards via the ODAO reward claim contract from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalNodeRewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total accrued rewards via the regular node reward claim contract from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageTotalODAORewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average total accrued rewards via the ODAO reward claim contract from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageODAORewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average reward per claim via the ODAO reward claim contract from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageNodeTotalRewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average total accrued rewards via the regular node reward claim contract from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageNodeRewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average reward per claim via the regular node reward claim contract from all previous checkpoints up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("rplPriceInETH")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The RPL price in ETH at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageRplPriceInETH")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("The average RPL price in ETH up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("queuedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current queued minipools accross all nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakingMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current staking minipools accross all nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakingUnbondedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Current unbonded staking minipools accross all nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("withdrawableMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Withdrawable minipools accross all nodes at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalFinalizedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total finalized minipools accross all nodes up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageFeeForActiveMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average minipool fee accross all nodes and the active (NOT finalized or destroyed) minipools at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("newMinipoolFee")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Fee to start a new minipool at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block number that was associated with this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp that was associated with this checkpoint.")])])])]),t._v(" "),v("h2",{attrs:{id:"nodebalancecheckpoint"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nodebalancecheckpoint"}},[t._v("#")]),t._v(" NodeBalanceCheckpoint")]),t._v(" "),v("p",[t._v("Description: Represents a balance checkpoint for a node.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Composite key consisting of the NetworkNodeBalanceCheckpoint ID and the Node ID.")])]),t._v(" "),v("tr",[v("td",[t._v("Node")]),t._v(" "),v("td",[t._v("Node!")]),t._v(" "),v("td",[t._v("Node that is associated with this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("NetworkNodeBalanceCheckpoint")]),t._v(" "),v("td",[t._v("NetworkNodeBalanceCheckpoint!")]),t._v(" "),v("td",[t._v("Network node balance checkpoint associated with this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("isOracleNode")]),t._v(" "),v("td",[t._v("Boolean!")]),t._v(" "),v("td",[t._v("Indicator that determines if a node is an oracle node or not at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("oracleNodeRPLBond")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("If this node is an oracle node at this checkpoint then it signifies the RPL bond of the ODAO node.")])]),t._v(" "),v("tr",[v("td",[t._v("oracleNodeBlockTime")]),t._v(" "),v("td",[t._v("BigInt")]),t._v(" "),v("td",[t._v("Identifies the block time of the last ODAO state change for this node at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("rplStaked")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("RPL staked at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("effectiveRPLStaked")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Effective RPL staked at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("minimumEffectiveRPL")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Minimum RPL needed to collateralize the staking minipools by the bare minimum at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("maximumEffectiveRPL")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Maximum RPL needed to collateralize the staking minipools by the absolute maximum at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalRPLSlashed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total RPL slashed up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalODAORewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total accrued rewards via the ODAO reward claim contract up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalNodeRewardsClaimed")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total accrued claimed rewards via the regular node reward claim contract up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageODAORewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average rewards accrued via the ODAO reward claim contract for this node up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageNodeRewardClaim")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average rewards accrued via the regular node reward claim contract for this node up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("odaoRewardClaimCount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total successfull claims a node has done via the ODAO reward claim contract up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("nodeRewardClaimCount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total successfull claims a node has done via the regular node reward claim contract up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("queuedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Queued minipools for this node at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakingMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Staking minipools for this node at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("stakingUnbondedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Unbonded staking minipools for this node at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("withdrawableMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Withdrawable minipools accross for this node at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("totalFinalizedMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Total Finalized minipools for this node up to this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("averageFeeForActiveMinipools")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Average minipool fee for this node and the active (NOT finalized or destroyed) minipools at this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("block")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block number that was associated with this checkpoint.")])]),t._v(" "),v("tr",[v("td",[t._v("blockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp that was associated with this checkpoint.")])])])]),t._v(" "),v("h2",{attrs:{id:"minipool"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#minipool"}},[t._v("#")]),t._v(" Minipool")]),t._v(" "),v("p",[t._v("Description: Represents a minipool for a node.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Field")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("id")]),t._v(" "),v("td",[t._v("ID!")]),t._v(" "),v("td",[t._v("Address of the minipool.")])]),t._v(" "),v("tr",[v("td",[t._v("node")]),t._v(" "),v("td",[t._v("Node!")]),t._v(" "),v("td",[t._v("Node that is associated with this minipool.")])]),t._v(" "),v("tr",[v("td",[t._v("fee")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Fee that was assigned to this minipool when it was created.")])]),t._v(" "),v("tr",[v("td",[t._v("nodeDepositETHAmount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Node deposit ETH amount (in WEI) that was assigned to this minipool when it was created.")])]),t._v(" "),v("tr",[v("td",[t._v("nodeDepositBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool received a node deposit.")])]),t._v(" "),v("tr",[v("td",[t._v("userDepositETHAmount")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("User deposit ETH amount (in WEI) that was assigned to this minipool.")])]),t._v(" "),v("tr",[v("td",[t._v("userDepositBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool received a user deposit.")])]),t._v(" "),v("tr",[v("td",[t._v("queuedBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool was queued.")])]),t._v(" "),v("tr",[v("td",[t._v("dequeuedBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool was dequeued.")])]),t._v(" "),v("tr",[v("td",[t._v("destroyedBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool was destroyed.")])]),t._v(" "),v("tr",[v("td",[t._v("stakingBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block number at which this minipool transitioned to the staking state.")])]),t._v(" "),v("tr",[v("td",[t._v("withdrawableBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool was marked as withdrawable.")])]),t._v(" "),v("tr",[v("td",[t._v("finalizedBlockTime")]),t._v(" "),v("td",[t._v("BigInt!")]),t._v(" "),v("td",[t._v("Block timestamp at which this minipool was marked as finalized.")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);