(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{634:function(e,t,s){"use strict";s.r(t);var a=s(13),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"creating-a-native-rocket-pool-node-without-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-native-rocket-pool-node-without-docker"}},[e._v("#")]),e._v(" Creating a Native Rocket Pool Node without Docker")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("This guide is designed for "),s("strong",[e._v("Smartnode v1.6.5 and higher")]),e._v(".")]),e._v(" "),s("p",[e._v("If you are using a previous version, you must upgrade to v1.6.5 or higher before configuring Native mode.")])]),e._v(" "),s("p",[e._v("In this section, we will walk through the process of installing the Rocket Pool Smartnode stack natively onto your system, without the use of Docker containers.")]),e._v(" "),s("p",[e._v("The general plan is as follows:")]),e._v(" "),s("ol",[s("li",[e._v("Create a standard solo-staking setup with "),s("code",[e._v("systemd")]),e._v(" services for the Execution Client, the Consensus Client / Beacon Node, and (if not using Nimbus) the Validator Client")]),e._v(" "),s("li",[e._v("Create system services for the Rocket Pool components (the "),s("strong",[e._v("node")]),e._v(" and "),s("strong",[e._v("watchtower")]),e._v(" processes)")]),e._v(" "),s("li",[e._v("Configure Rocket Pool to communicate with your client services")]),e._v(" "),s("li",[e._v("Update your Validator Client service definition to use Rocket Pool's fee recipient and validator keys")])]),e._v(" "),s("p",[e._v("This is a fairly involved setup so it will take some time to complete.")]),e._v(" "),s("p",[e._v("The diversity of Operating Systems and distros available make it impractical to make guides available for all of them.\nThe instructions in this guide are tailored to a Debian-based system (including Ubuntu).\nFor other distros or operating systems, you may follow the high-level steps described in the guide but will have to substitute certain commands for the ones that your system uses as appropriate.")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("DANGER")]),e._v(" "),s("p",[e._v("This guide is intended for users that are experienced with Linux system administration and usage.\nThis includes using the terminal, creating system accounts, managing permissions, and installing services.\nWe assume you are familiar with these activities - as you will be managing the bulk of the infrastructure yourself, we only provide limited support for Native installations.\n"),s("strong",[e._v("If you are not familiar with these activites, we do not recommend that you use Native Mode.")])])]),e._v(" "),s("h2",{attrs:{id:"step-1-set-up-the-execution-and-consensus-clients"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-1-set-up-the-execution-and-consensus-clients"}},[e._v("#")]),e._v(" Step 1: Set up the Execution and Consensus Clients")]),e._v(" "),s("p",[e._v("Native Mode effectively extends a standard solo-staking setup, and simply allows the Smartnode software to attach to the clients that it already runs (with a few small modifications).")]),e._v(" "),s("p",[e._v("To that end, we recommend you start by following some of the conventional solo staking guides provided by the community:")]),e._v(" "),s("ul",[s("li",[e._v("Somer Esat's set of guides per-client: "),s("a",{attrs:{href:"https://github.com/SomerEsat/ethereum-staking-guides",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/SomerEsat/ethereum-staking-guides"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("CoinCashew guides: "),s("a",{attrs:{href:"https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("Note that "),s("strong",[e._v("you won't actually create a validator as defined in those guides")]),e._v(" - Rocket Pool will do that for you.\n"),s("strong",[e._v("You can ignore the portions involving the Staking Deposit CLI tool.")])]),e._v(" "),s("p",[e._v("You simply need to follow the guides to the point where you have an Execution Client service, a Consensus Client / Beacon Node service, and a Validator Client service ("),s("em",[e._v("except for Nimbus, which currently doesn't have a separate Validator Client")]),e._v(") all installed and syncing the chain.\n"),s("strong",[e._v("Skip the steps that involve funding a validator and recording its mnemonic.")])]),e._v(" "),s("p",[e._v("Also, there is a special case for the "),s("strong",[e._v("fee recipient")]),e._v(" - when you get to the portion of the guide where you specify the fee recipient in your Validator Client configuration, "),s("strong",[e._v("leave it blank for now")]),e._v(".\nWe will describe how to set it up for Rocket Pool validators below.")]),e._v(" "),s("p",[e._v("Once your clients are installed and you can see in their logs that they are syncing the chains properly, you can follow the next steps to set up the Rocket Pool Smartnode and connect it to your clients.")]),e._v(" "),s("h2",{attrs:{id:"step-2-install-rocket-pool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-2-install-rocket-pool"}},[e._v("#")]),e._v(" Step 2: Install Rocket Pool")]),e._v(" "),s("h3",{attrs:{id:"creating-the-service-account"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-the-service-account"}},[e._v("#")]),e._v(" Creating the Service Account")]),e._v(" "),s("p",[e._v("The first step is to create a new system account for the Rocket Pool services and disable login and shell access for it:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo useradd -r -s /sbin/nologin rp\n")])])]),s("p",[e._v("Now, add yourself to the "),s("code",[e._v("rp")]),e._v(" group.\nYou'll need to do this in order to use the Rocket Pool CLI, because it and the Rocket Pool daemon both need to access the Execution layer wallet file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo usermod -aG rp $USER\n")])])]),s("p",[e._v("Finally, add the user account for your "),s("strong",[e._v("Validator Client")]),e._v(" (or for your "),s("strong",[e._v("Beacon Node")]),e._v(" if using Nimbus, since Nimbus doesn't have a separate validator client) to the "),s("code",[e._v("rp")]),e._v(" group as well.\nThe name of that user account depends on which guide you followed to set up your VC service.")]),e._v(" "),s("p",[e._v("For example, if your VC runs as user "),s("code",[e._v("lighthousevalidator")]),e._v(", you would do the following:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo usermod -aG rp lighthousevalidator\n")])])]),s("p",[e._v("After this, logout and back in for the changes to take effect.")]),e._v(" "),s("h3",{attrs:{id:"setting-up-the-binaries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-binaries"}},[e._v("#")]),e._v(" Setting up the Binaries")]),e._v(" "),s("p",[e._v("Start by making a folder for Rocket Pool and a data subfolder.\nYou can put this wherever you want; for this guide, I'll put it into "),s("code",[e._v("/srv")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p /srv/rocketpool\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v(" /srv/rocketpool\n")])])]),s("p",[e._v("Now, download the CLI and daemon binaries (or ignore this and build them from source if you prefer).\nChoose the platform that your system uses from the tabs below.")]),e._v(" "),s("Tabs",{attrs:{type:"border-card"}},[s("Tab",{attrs:{label:"Linux x64"}},[s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-linux-amd64 -O /usr/local/bin/rocketpool\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-linux-amd64 -O /usr/local/bin/rocketpoold\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/rocketpool\n")])])])]),e._v(" "),s("Tab",{attrs:{label:"Linux arm64"}},[s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-linux-arm64 -O /usr/local/bin/rocketpool\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-linux-arm64 -O /usr/local/bin/rocketpoold\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/rocketpool\n")])])])]),e._v(" "),s("Tab",{attrs:{label:"macOS x64"}},[s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-darwin-amd64 -O /usr/local/bin/rocketpool\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-darwin-amd64 -O /usr/local/bin/rocketpoold\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/rocketpool\n")])])])]),e._v(" "),s("Tab",{attrs:{label:"macOS arm64"}},[s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-darwin-arm64 -O /usr/local/bin/rocketpool\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-daemon-darwin-arm64 -O /usr/local/bin/rocketpoold\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/rocketpool\n")])])])])],1),e._v(" "),s("p",[e._v("Now, set the owner and group of the daemon to "),s("code",[e._v("rp")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo chown rp:rp /usr/local/bin/rocketpoold\n")])])]),s("p",[e._v("Finally, "),s("strong",[e._v("set the "),s("code",[e._v("suid")]),e._v(" bit")]),e._v(" and other permissions bits on the daemon binary:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo chmod u+sx,g+sx,o-rwx /usr/local/bin/rocketpoold\n")])])]),s("p",[e._v("This will ensure that the daemon always runs as the "),s("code",[e._v("rp")]),e._v(" user, so it always has the proper permissions set.")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("The Smartnode will most likely fail with permissions errors if you don't do this.\nPlease be sure to run this command!")])]),e._v(" "),s("h3",{attrs:{id:"setting-up-the-installation-folder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-installation-folder"}},[e._v("#")]),e._v(" Setting up the Installation Folder")]),e._v(" "),s("p",[e._v("With the CLI and Daemon installed, you'll need to next set up the folder structure and accompanying files that the Smartnode expects to exist.\nStart by creating the following folders:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir -p /srv/rocketpool/data/validators && sudo chmod 775 /srv/rocketpool/data/validators\n\nmkdir /srv/rocketpool/data/rewards-trees\n\nmkdir /srv/rocketpool/data/custom-keys\n\nsudo chown -R rp:rp /srv/rocketpool/data\n")])])]),s("p",[e._v("Next, download the following scripts - Rocket Pool will use them when it needs to stop or restart your Validator Client to change its fee recipient (discussed later) or load new keys after you create a new minipool:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/raw/release/install/scripts/restart-vc.sh -O /srv/rocketpool/restart-vc.sh\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/rocket-pool/smartnode-install/raw/release/install/scripts/stop-validator.sh -O /srv/rocketpool/stop-validator.sh\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /srv/rocketpool/restart-vc.sh\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /srv/rocketpool/stop-validator.sh\n")])])]),s("p",[e._v("Now open "),s("code",[e._v("~/.profile")]),e._v(" with your editor of choice and add this line to the end:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("alias")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("rp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rocketpool -d /usr/local/bin/rocketpoold -c /srv/rocketpool"')]),e._v("\n")])])]),s("p",[e._v("Save it, then reload your profile:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" ~/.profile\n")])])]),s("p",[e._v("This will let you interact with Rocket Pool's CLI with the "),s("code",[e._v("rp")]),e._v(" command, which is a nice shortcut.")]),e._v(" "),s("h3",{attrs:{id:"creating-the-services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-the-services"}},[e._v("#")]),e._v(" Creating the Services")]),e._v(" "),s("p",[e._v("Next up, we'll create a "),s("code",[e._v("systemd")]),e._v(" service for the Rocket Pool node daemon.\nThis is the service that will automatically check for and claim RPL rewards after each checkpoint, and stake minipools once you've created them via "),s("code",[e._v("node deposit")]),e._v(".")]),e._v(" "),s("p",[e._v("We'll also create a "),s("code",[e._v("watchtower")]),e._v(" service as well.\nThis will be used if you're an Oracle DAO member, or if you ever want to generate your own rewards interval trees (discussed in the "),s("RouterLink",{attrs:{to:"/guides/node/rewards.html"}},[e._v("Claiming Rewards")]),e._v(" section later on).")],1),e._v(" "),s("Tabs",{attrs:{type:"border-card"}},[s("Tab",{attrs:{label:"Node"}},[s("p",[e._v("Create the "),s("code",[e._v("rp-node")]),e._v(" service:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo nano /etc/systemd/system/rp-node.service\n")])])]),s("p",[e._v("Contents:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[Unit]\nDescription=rp-node\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/rocketpoold --settings /srv/rocketpool/user-settings.yml node\n\n[Install]\nWantedBy=multi-user.target\n")])])]),s("p",[e._v("Create a log file for the service, so you can watch its output - this will replace the behavior of "),s("code",[e._v("rocketpool service logs node")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nano /srv/rocketpool/node-log.sh\n")])])]),s("p",[e._v("Contents:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/bin/bash\njournalctl -u rp-node -b -f\n")])])]),s("p",[e._v("Save it, then make it executable:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("chmod +x /srv/rocketpool/node-log.sh\n")])])]),s("p",[e._v("Now you can watch the node's logs by simply running:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo /srv/rocketpool/node-log.sh\n")])])])]),e._v(" "),s("Tab",{attrs:{label:"Watchtower"}},[s("p",[e._v("Create a service for the watchtower:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo nano /etc/systemd/system/rp-watchtower.service\n")])])]),s("p",[e._v("Contents:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[Unit]\nDescription=rp-node\nAfter=network.target\n\n[Service]\nType=simple\nUser=rp\nRestart=always\nRestartSec=5\nExecStart=/usr/local/bin/rocketpoold --settings /srv/rocketpool/user-settings.yml watchtower\n\n[Install]\nWantedBy=multi-user.target\n")])])]),s("p",[e._v("Create a log file for the watchtower:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nano /srv/rocketpool/watchtower-log.sh\n")])])]),s("p",[e._v("Contents:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/bin/bash\njournalctl -u rp-watchtower -b -f\n")])])]),s("p",[e._v("Save it, then make it executable:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("chmod +x /srv/rocketpool/watchtower-log.sh\n")])])]),s("p",[e._v("Now you can watch the watchtower's logs by simply running:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo /srv/rocketpool/watchtower-log.sh\n")])])])])],1),e._v(" "),s("p",[e._v("The services are now installed.")]),e._v(" "),s("h3",{attrs:{id:"setting-up-passwordless-script-access"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-passwordless-script-access"}},[e._v("#")]),e._v(" Setting up Passwordless Script Access")]),e._v(" "),s("p",[e._v("The next step is to give the "),s("code",[e._v("rp")]),e._v(" user the ability to restart the Validator Client when new validator keys are created, and stop the Validator Client if an emergency condition is detected.")]),e._v(" "),s("p",[e._v("Create a new "),s("code",[e._v("sudoers")]),e._v(" file using "),s("code",[e._v("visudo")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo visudo -f /etc/sudoers.d/rocketpool\n")])])]),s("p",[e._v("Add the following lines to it:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Cmnd_Alias RP_RESTART = /usr/bin/systemctl restart <validator service name>\nCmnd_Alias RP_STOP = /usr/bin/systemctl stop <validator service name>\nrp    ALL=(ALL) NOPASSWD: RP_RESTART, RP_STOP\n")])])]),s("p",[e._v("Where "),s("code",[e._v("<validator service name>")]),e._v(" is the name of your VC service (e.g. "),s("code",[e._v("lighthousevalidator")]),e._v(")")]),e._v(" "),s("p",[e._v("Now, modify "),s("code",[e._v("/srv/rocketpool/restart-vc.sh")]),e._v(":")]),e._v(" "),s("ul",[s("li",[e._v("Uncomment the line at the end and change it to "),s("code",[e._v("sudo systemctl restart <validator service name>")])])]),e._v(" "),s("p",[e._v("Also modify "),s("code",[e._v("/srv/rocketpool/stop-validator.sh")]),e._v(":")]),e._v(" "),s("ul",[s("li",[e._v("Uncomment the line at the end and change it to "),s("code",[e._v("sudo systemctl stop <validator service name>")])])]),e._v(" "),s("p",[e._v("All set!\nThe "),s("code",[e._v("node")]),e._v(" process can now restart or stop your VC as required automatically.")]),e._v(" "),s("h2",{attrs:{id:"step-3-configure-the-smartnode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-3-configure-the-smartnode"}},[e._v("#")]),e._v(" Step 3: Configure the Smartnode")]),e._v(" "),s("p",[e._v("Now that your services are all created, it's time to configure the Smartnode stack.")]),e._v(" "),s("p",[e._v("Please visit the "),s("RouterLink",{attrs:{to:"/guides/node/config-native.html"}},[e._v("Configuring the Smartnode Stack (Native Mode)")]),e._v(" guide, and return here when you are finished.")],1),e._v(" "),s("h3",{attrs:{id:"enabling-and-running-the-services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enabling-and-running-the-services"}},[e._v("#")]),e._v(" Enabling and Running the Services")]),e._v(" "),s("p",[e._v("With all of the services installed, it's time to:")]),e._v(" "),s("ul",[s("li",[e._v("Enable them so they'll automatically restart if they break, and automatically start on a reboot")]),e._v(" "),s("li",[e._v("Start them all")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo systemctl daemon-reload\n\nsudo systemctl enable rp-node rp-watchtower\n\nsudo systemctl start rp-node rp-watchtower\n")])])]),s("h3",{attrs:{id:"setting-up-a-wallet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-a-wallet"}},[e._v("#")]),e._v(" Setting Up a Wallet")]),e._v(" "),s("p",[e._v("Next, create a new node wallet or recover an existing wallet.\nPlease carefully follow the instructions in the "),s("RouterLink",{attrs:{to:"/guides/node/starting-rp.html##setting-up-a-wallet"}},[e._v("Setting up a Wallet")]),e._v(" portion of the guide, then return here when you're done.")],1),e._v(" "),s("p",[e._v("Once that's done, use the service log file scripts to verify that they successfully loaded your new wallet.\nYou should also verify this using the following command:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("rp wallet status\n")])])]),s("p",[e._v("If working properly it should produce the following output:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Your Smartnode is currently using the Prater Test Network.\n\nThe node wallet is initialized.\nNode account: <address>\n")])])]),s("h2",{attrs:{id:"step-4-update-the-vc-service-definition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-4-update-the-vc-service-definition"}},[e._v("#")]),e._v(" Step 4: Update the VC Service Definition")]),e._v(" "),s("p",[e._v("Unlike a solo staking setup, Rocket Pool generates and manages its validator keys automatically.\nThere are a few adjustments you'll need to make to the VC service definition file you just created in order for it to work with Rocket Pool correctly, including:")]),e._v(" "),s("ul",[s("li",[e._v("The "),s("strong",[e._v("Fee Recipient")])]),e._v(" "),s("li",[e._v("The VC's data or wallet directory")]),e._v(" "),s("li",[e._v("The VC's keys and secrets directories")])]),e._v(" "),s("p",[e._v("We'll cover these step-by-step for each client.")]),e._v(" "),s("h3",{attrs:{id:"setting-up-the-fee-recipient-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-fee-recipient-file"}},[e._v("#")]),e._v(" Setting Up the Fee Recipient File")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("It is "),s("strong",[e._v("crucial")]),e._v(" that you follow these steps - failing to do so and using the wrong fee recipient will result in "),s("a",{attrs:{href:"https://github.com/rocket-pool/rocketpool-research/blob/master/Penalties/penalty-system.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("penalties"),s("OutboundLink")],1),e._v(" being applied to your validators and deductions taken from your Beacon Chain balance!")])]),e._v(" "),s("p",[e._v("The "),s("strong",[e._v("fee recipient")]),e._v(" is the argument you provide to your Validator Client that specifies the address on the Execution layer that you want your priority fees and MEV rewards to be sent to.\nRocket Pool has two different addresses for the fee recipient:")]),e._v(" "),s("ul",[s("li",[e._v("If you are opted into the Smoothing Pool, it must be the "),s("strong",[e._v("Smoothing Pool's address")])]),e._v(" "),s("li",[e._v("If you are opted out of the Smoothing Pool, it must be "),s("strong",[e._v("your node's Fee Distributor address")])])]),e._v(" "),s("p",[s("em",[e._v("To learn more about the Smoothing Pool and your Fee Distributor, please see the "),s("RouterLink",{attrs:{to:"/guides/node/fee-distrib-sp.html"}},[e._v("Fee Distributors and the Smoothing Pool")]),e._v(" section of the guide.")],1)]),e._v(" "),s("p",[e._v("Rocket Pool's "),s("code",[e._v("node")]),e._v(" service will set this for you automatically by detecting which one it needs to be and setting it in a configuration file and restarting your Validator Client service to pick up the change.\nYour Validator Client service can use that configuration file automatically so you don't need to hard-code the fee recipient.")]),e._v(" "),s("p",[e._v("Open the "),s("code",[e._v("systemd")]),e._v(" service definition file that you just created for your Validator Client.\nBefore the "),s("code",[e._v("ExecStart")]),e._v(" line, add this line:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("EnvironmentFile=/srv/rocketpool/data/validators/rp-fee-recipient-env.txt\n")])])]),s("p",[e._v("Then modify your fee recipient argument as follows; select your client of choice from the tabs below:")]),e._v(" "),s("Tabs",{attrs:{type:"border-card"}},[s("Tab",{attrs:{label:"Lighthouse"}},[s("p",[e._v("Change "),s("code",[e._v("--suggested-fee-recipient <address>")]),e._v(" to "),s("code",[e._v("--suggested-fee-recipient ${FEE_RECIPIENT}")])])]),e._v(" "),s("Tab",{attrs:{label:"Nimbus"}},[s("p",[e._v("Change "),s("code",[e._v("--suggested-fee-recipient=<address>")]),e._v(" to "),s("code",[e._v("--suggested-fee-recipient=${FEE_RECIPIENT}")])])]),e._v(" "),s("Tab",{attrs:{label:"Prysm"}},[s("p",[e._v("Change "),s("code",[e._v("--suggested-fee-recipient <address>")]),e._v(" to "),s("code",[e._v("--suggested-fee-recipient ${FEE_RECIPIENT}")])])]),e._v(" "),s("Tab",{attrs:{label:"Teku"}},[s("p",[e._v("Change "),s("code",[e._v("--validators-proposer-default-fee-recipient=<address>")]),e._v(" to "),s("code",[e._v("--validators-proposer-default-fee-recipient=${FEE_RECIPIENT}")])])])],1),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("If you start your Validator Client before Rocket Pool's services, it may error out because this file does not exist yet.\nDon't worry, this file will be created by Rocket Pool once you've initialized and started its services.")])]),e._v(" "),s("h3",{attrs:{id:"setting-the-data-and-keys-directories"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-the-data-and-keys-directories"}},[e._v("#")]),e._v(" Setting the Data and Keys Directories")]),e._v(" "),s("p",[e._v("Next, you must tell the VC where to store its data and load the validator keys that Rocket Pool generates.\nClick on the client you use in the tabs below:")]),e._v(" "),s("Tabs",{attrs:{type:"border-card"}},[s("Tab",{attrs:{label:"Lighthouse"}},[s("p",[e._v("Create the following directories and set their owner to "),s("code",[e._v("rp")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo mkdir -p /srv/rocketpool/data/validators/lighthouse/validators\n\nsudo mkdir -p /srv/rocketpool/data/validators/lighthouse/secrets\n\nsudo chown -R rp:rp /srv/rocketpool/data/validators/lighthouse\n\nsudo chmod -R 775 /srv/rocketpool/data/validators/lighthouse\n")])])]),s("p",[e._v("Now, add or change the following parameters in the Lighthouse VC's service definition file to these new values:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("--datadir /srv/rocketpool/data/validators/lighthouse\n")])])])]),e._v(" "),s("Tab",{attrs:{label:"Nimbus"}},[s("p",[e._v("Create the following directories and set their owner to "),s("code",[e._v("rp")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo mkdir -p /srv/rocketpool/data/validators/nimbus/validators\n\nsudo mkdir -p /srv/rocketpool/data/validators/nimbus/secrets\n\nsudo chown -R rp:rp /srv/rocketpool/data/validators/nimbus\n\nsudo chmod -R 775 /srv/rocketpool/data/validators/nimbus\n")])])]),s("p",[e._v("Now, add or change the following parameters in Nimbus's service definition file to the following:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("--validators-dir=/srv/rocketpool/data/validators/nimbus/validators --secrets-dir=/srv/rocketpool/data/validators/nimbus/secrets\n")])])])]),e._v(" "),s("Tab",{attrs:{label:"Prysm"}},[s("p",[e._v("Create the following directories and set their owner to "),s("code",[e._v("rp")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo mkdir -p /srv/rocketpool/data/validators/prysm-non-hd/direct/accounts\n\nsudo chown -R rp:rp /srv/rocketpool/data/validators/prysm-non-hd\n\nsudo chmod -R 775 /srv/rocketpool/data/validators/prysm-non-hd\n")])])]),s("p",[e._v("Add or change the following parameters in the Prysm VC's service definition file to these new values:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("--wallet-dir /srv/rocketpool/data/validators/prysm-non-hd --wallet-password-file /srv/rocketpool/data/validators/prysm-non-hd/direct/accounts/secret\n")])])]),s("p",[e._v("The VC will fail to start until you make a new Rocket Pool minipool (described later in the guides) because these files won't be created until that time, but the Beacon Node will be able to sync properly.")])]),e._v(" "),s("Tab",{attrs:{label:"Teku"}},[s("p",[e._v("Create the following directories and set their owner to "),s("code",[e._v("rp")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo mkdir -p /srv/rocketpool/data/validators/teku/keys\n\nsudo mkdir -p /srv/rocketpool/data/validators/teku/passwords\n\nsudo chown -R rp:rp /srv/rocketpool/data/validators\n\nsudo chmod -R 775 /srv/rocketpool/data/validators/teku\n")])])]),s("p",[e._v("Now, add or change the following parameters in the Teku VC's service definition file to the following:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("--data-path=/srv/rocketpool/data/validators/teku --validator-keys=/srv/rocketpool/data/validators/teku/keys:/srv/rocketpool/data/validators/teku/passwords \n")])])])])],1),e._v(" "),s("h3",{attrs:{id:"relaxing-umask"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relaxing-umask"}},[e._v("#")]),e._v(" Relaxing "),s("code",[e._v("umask")])]),e._v(" "),s("p",[e._v("By default, your system will typically come with a "),s("a",{attrs:{href:""}},[s("code",[e._v("umask")])]),e._v(" configuration that will strip the "),s("code",[e._v("+w")]),e._v(" bit from the group permissions whenever the "),s("code",[e._v("node")]),e._v(" daemon creates a new folder.\nThis is problematic for several consensus clients, because they will actually write things such as lock files or other metadata into the directories that the Smartnode creates when it generates new validator keys during a minipool deposit.")]),e._v(" "),s("p",[e._v("To combat this and ensure your VC works correctly, please "),s("strong",[e._v("relax your "),s("code",[e._v("umask")]),e._v(" settings")]),e._v(".\nFor example, instead of "),s("code",[e._v("0022")]),e._v(", you should consider setting it to "),s("code",[e._v("0002")]),e._v(" for the "),s("code",[e._v("rp")]),e._v(" user.")]),e._v(" "),s("p",[e._v("Every system is different, so please consult "),s("a",{attrs:{href:"https://www.howtogeek.com/812961/umask-linux/",target:"_blank",rel:"noopener noreferrer"}},[e._v("a guide"),s("OutboundLink")],1),e._v(" that covers your Operating System to learn how to do this.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("This step is "),s("em",[e._v("crucial")]),e._v(" to ensure the automatic staking and validating duties are handled properly.\nIf you notice permissions problems in your VC's logs after your minipool passes the 12-hour scrub check and enters "),s("code",[e._v("staking")]),e._v(" status, you will likely need to run "),s("code",[e._v("sudo chmod 775")]),e._v(" on the folder containing your validator keys so your VC service can write to that folder.")])]),e._v(" "),s("h3",{attrs:{id:"reloading-the-vc-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reloading-the-vc-service"}},[e._v("#")]),e._v(" Reloading the VC Service")]),e._v(" "),s("p",[e._v("With these changes made, you can now reload and restart the VC service using the following:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sudo systemctl daemon-reload\n\nsudo systemctl restart <vc-service>\n")])])]),s("p",[s("strong",[e._v("If not using Prysm")]),e._v(", please watch the VC's logs carefully (or the BN's logs in the case of Nimbus) to ensure that it successfully started properly and the following are defined correctly:")]),e._v(" "),s("ul",[s("li",[e._v("The fee recipient")]),e._v(" "),s("li",[e._v("The data path")]),e._v(" "),s("li",[e._v("The wallet / keys / secrets path")])]),e._v(" "),s("p",[e._v("You can verify this with, for example, "),s("code",[e._v("ps aux | grep fee")]),e._v(" to filter the running processes to look at the fee recipient that your VC has used.\n"),s("strong",[e._v("It should be the same one defined in "),s("code",[e._v("/srv/rocketpool/data/validators/rp-fee-recipient-env.txt")]),e._v(".")])]),e._v(" "),s("p",[e._v("If they are all using the correct values, then congratulations!\nYou've successfully set up your Rocket Pool node and can follow the next sections of the guide to learn how to use it.")]),e._v(" "),s("h2",{attrs:{id:"next-steps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next-steps"}},[e._v("#")]),e._v(" Next Steps")]),e._v(" "),s("p",[e._v("Now that your clients are installed, we recommend you take a look at the security suggestions in the "),s("RouterLink",{attrs:{to:"/guides/node/securing-your-node.html"}},[e._v("Securing your Node")]),e._v(" section next.\nAs you're running a Native setup, you have likely done some of these things already; nevertheless, it doesn't hurt to at least explore it and see how well the recommended security posture fits with your system.")],1)],1)}),[],!1,null,null,null);t.default=o.exports}}]);